# Form implementation generated from reading ui file 'PSLtoUrdu.ui'
#
# Created by: PyQt6 UI code generator 6.1.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from datetime import date, datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QSize
from PyQt6.QtGui import QPixmap, QIcon


class Ui_MainWindow_PSLtoUrdu(object):


    def dynamic_Sign_Language(self):
        import cv2
        import numpy as np
        import os
        from matplotlib import pyplot as plt
        import time
        import mediapipe as mp
        from scipy import stats
        from tensorflow.keras.models import Sequential
        from tensorflow.keras.layers import LSTM, Dense
        from tensorflow.keras.callbacks import TensorBoard

        actions = np.array(['خوبصورت', 'چھت کا پنکھا', 'بجلی کی استری', 'ائرکنڈیشنر'])

        mp_holistic = mp.solutions.holistic  # Holistic model
        mp_drawing = mp.solutions.drawing_utils  # Drawing utilities

        def mediapipe_detection(image, model):
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # COLOR CONVERSION BGR 2 RGB
            image.flags.writeable = False  # Image is no longer writeable
            results = model.process(image)  # Make prediction
            image.flags.writeable = True  # Image is now writeable
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)  # COLOR COVERSION RGB 2 BGR
            return image, results

        def draw_landmarks(image, results):
            mp_drawing.draw_landmarks(image, results.face_landmarks,
                                      mp_holistic.FACEMESH_CONTOURS)  # Draw face connections
            mp_drawing.draw_landmarks(image, results.pose_landmarks,
                                      mp_holistic.POSE_CONNECTIONS)  # Draw pose connections
            mp_drawing.draw_landmarks(image, results.left_hand_landmarks,
                                      mp_holistic.HAND_CONNECTIONS)  # Draw left hand connections
            mp_drawing.draw_landmarks(image, results.right_hand_landmarks,
                                      mp_holistic.HAND_CONNECTIONS)  # Draw right hand connections

        def draw_styled_landmarks(image, results):
            # Draw face connections
            mp_drawing.draw_landmarks(image, results.face_landmarks, mp_holistic.FACEMESH_CONTOURS,
                                      mp_drawing.DrawingSpec(color=(80, 110, 10), thickness=1, circle_radius=1),
                                      mp_drawing.DrawingSpec(color=(80, 256, 121), thickness=1, circle_radius=1)
                                      )
            # Draw pose connections
            mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_holistic.POSE_CONNECTIONS,
                                      mp_drawing.DrawingSpec(color=(80, 22, 10), thickness=2, circle_radius=4),
                                      mp_drawing.DrawingSpec(color=(80, 44, 121), thickness=2, circle_radius=2)
                                      )
            # Draw left hand connections
            mp_drawing.draw_landmarks(image, results.left_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                                      mp_drawing.DrawingSpec(color=(121, 22, 76), thickness=2, circle_radius=4),
                                      mp_drawing.DrawingSpec(color=(121, 44, 250), thickness=2, circle_radius=2)
                                      )
            # Draw right hand connections
            mp_drawing.draw_landmarks(image, results.right_hand_landmarks, mp_holistic.HAND_CONNECTIONS,
                                      mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=4),
                                      mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=2)
                                      )

        def extract_keypoints(results):
            pose = np.array([[res.x, res.y, res.z, res.visibility] for res in
                             results.pose_landmarks.landmark]).flatten() if results.pose_landmarks else np.zeros(33 * 4)
            face = np.array([[res.x, res.y, res.z] for res in
                             results.face_landmarks.landmark]).flatten() if results.face_landmarks else np.zeros(
                468 * 3)
            lh = np.array([[res.x, res.y, res.z] for res in
                           results.left_hand_landmarks.landmark]).flatten() if results.left_hand_landmarks else np.zeros(
                21 * 3)
            rh = np.array([[res.x, res.y, res.z] for res in
                           results.right_hand_landmarks.landmark]).flatten() if results.right_hand_landmarks else np.zeros(
                21 * 3)
            return np.concatenate([pose, face, lh, rh])

        colors = [(245, 117, 16), (117, 245, 16), (16, 117, 245)]

        model = Sequential()
        model = Sequential()
        model.add(LSTM(64, return_sequences=True, activation='relu', input_shape=(40, 1662)))
        model.add(LSTM(128, return_sequences=True, activation='relu'))
        model.add(LSTM(64, return_sequences=False, activation='relu'))
        model.add(Dense(64, activation='relu'))
        model.add(Dense(32, activation='relu'))
        model.add(Dense(actions.shape[0], activation='softmax'))

        model.save('action.h5')
        model.load_weights('action.h5')
        sequence = []
        sentence = []
        predictions = []
        threshold = 0.5

        cap = cv2.VideoCapture(0)
        # Set mediapipe model
        with mp_holistic.Holistic(min_detection_confidence=0.5, min_tracking_confidence=0.5) as holistic:
            while cap.isOpened():

                # Read feed
                ret, frame = cap.read()

                # Make detections
                image, results = mediapipe_detection(frame, holistic)
                print(results)

                # Draw landmarks
                draw_styled_landmarks(image, results)

                # 2. Prediction logic
                keypoints = extract_keypoints(results)
                sequence.append(keypoints)
                sequence = sequence[-30:]

                if len(sequence) == 30:
                    res = model.predict(np.expand_dims(sequence, axis=0))[0]
                    print(actions[np.argmax(res)])
                    predictions.append(np.argmax(res))

                    # 3. Viz logic
                    if np.unique(predictions[-10:])[0] == np.argmax(res):
                        if res[np.argmax(res)] > threshold:

                            if len(sentence) > 0:
                                if actions[np.argmax(res)] != sentence[-1]:
                                    sentence.append(actions[np.argmax(res)])
                            else:
                                sentence.append(actions[np.argmax(res)])

                    if len(sentence) > 5:
                        sentence = sentence[-5:]

                # Show to screen
                cv2.imshow('OpenCV Feed', image)

                # Break gracefully
                if cv2.waitKey(10) & 0xFF == ord('q'):
                    break
            cap.release()
            cv2.destroyAllWindows()

    def static_Sign_Language(self):
        import cv2
        import numpy as np
        import os
        from object_detection.utils import label_map_util
        from object_detection.utils import visualization_utils as viz_utils
        from object_detection.builders import model_builder
        import tensorflow as tf
        from object_detection.utils import config_util
        from object_detection.protos import pipeline_pb2
        from google.protobuf import text_format

        WORKSPACE_PATH = 'Tensorflow/workspace'
        SCRIPTS_PATH = 'Tensorflow/scripts'
        APIMODEL_PATH = 'Tensorflow/models'
        ANNOTATION_PATH = WORKSPACE_PATH + '/annotations'
        IMAGE_PATH = WORKSPACE_PATH + '/images'
        MODEL_PATH = WORKSPACE_PATH + '/models'
        PRETRAINED_MODEL_PATH = WORKSPACE_PATH + '/pre-trained-models'
        CONFIG_PATH = MODEL_PATH + '/my_ssd_mobnet/pipeline.config'
        CHECKPOINT_PATH = MODEL_PATH + '/my_ssd_mobnet/'

        # Load pipeline config and build a detection model
        configs = config_util.get_configs_from_pipeline_file(CONFIG_PATH)
        detection_model = model_builder.build(model_config=configs['model'], is_training=False)

        # Restore checkpoint
        ckpt = tf.compat.v2.train.Checkpoint(model=detection_model)
        ckpt.restore(os.path.join(CHECKPOINT_PATH, 'ckpt-6')).expect_partial()

        @tf.function
        def detect_fn(image):
            image, shapes = detection_model.preprocess(image)
            prediction_dict = detection_model.predict(image, shapes)
            detections = detection_model.postprocess(prediction_dict, shapes)
            return detections

        category_index = label_map_util.create_category_index_from_labelmap(ANNOTATION_PATH + '/label_map.pbtxt')

        cap = cv2.VideoCapture(0)
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

        while True:
            ret, frame = cap.read()
            image_np = np.array(frame)

            input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.float32)
            detections = detect_fn(input_tensor)

            num_detections = int(detections.pop('num_detections'))
            detections = {key: value[0, :num_detections].numpy()
                          for key, value in detections.items()}
            detections['num_detections'] = num_detections

            # detection_classes should be ints.
            detections['detection_classes'] = detections['detection_classes'].astype(np.int64)

            label_id_offset = 1
            image_np_with_detections = image_np.copy()

            viz_utils.visualize_boxes_and_labels_on_image_array(
                image_np_with_detections,
                detections['detection_boxes'],
                detections['detection_classes'] + label_id_offset,
                detections['detection_scores'],
                category_index,
                use_normalized_coordinates=True,
                max_boxes_to_draw=5,
                min_score_thresh=.5,
                agnostic_mode=False)

            cv2.imshow('object detection', cv2.resize(image_np_with_detections, (800, 600)))

            if cv2.waitKey(1) & 0xFF == ord('q'):
                cap.release()
                break

        detections = detect_fn(input_tensor)
    # method for opening menu screen
    def Menu(self):
        from Menu import Ui_MainWindow_Menu
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_Menu()
        self.ui.setupUi(self.window2)
        self.window2.show()



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 764)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ProfileScreen = QtWidgets.QLabel(self.centralwidget)
        self.ProfileScreen.setGeometry(QtCore.QRect(10, 0, 1024, 768))
        # self.ProfileScreen.setStyleSheet("background-image: url(:/newPrefix/PSLToUrdu.png);")
        self.ProfileScreen.setPixmap(QPixmap("./Images/PSL To Urdu.png"))
        self.ProfileScreen.setText("")
        self.ProfileScreen.setObjectName("ProfileScreen")
        self.DashboardIcon = QtWidgets.QLabel(self.centralwidget)
        self.DashboardIcon.setGeometry(QtCore.QRect(17, 262, 54, 30))
        self.DashboardIcon.setPixmap(QPixmap("./Images/Group 308.png"))
        # self.DashboardIcon.setStyleSheet("image: url(:/newPrefix/Group 308.png);")
        self.DashboardIcon.setText("")
        self.DashboardIcon.setObjectName("DashboardIcon")
        self.PslToUrduIcon = QtWidgets.QLabel(self.centralwidget)
        self.PslToUrduIcon.setGeometry(QtCore.QRect(17, 330, 56, 35))
        self.PslToUrduIcon.setPixmap(QPixmap("./Images/Group 309.png"))
        # self.PslToUrduIcon.setStyleSheet("image: url(:/newPrefix/Group 309.png);")
        self.PslToUrduIcon.setText("")
        self.PslToUrduIcon.setObjectName("PslToUrduIcon")
        self.AudioToUrduIcon = QtWidgets.QLabel(self.centralwidget)
        self.AudioToUrduIcon.setGeometry(QtCore.QRect(10, 404, 68, 36))
        self.AudioToUrduIcon.setPixmap(QPixmap("./Images/Group 310.png"))
        # self.AudioToUrduIcon.setStyleSheet("Image: url(:/newPrefix/Group 310.png)")
        self.AudioToUrduIcon.setText("")
        self.AudioToUrduIcon.setObjectName("AudioToUrduIcon")
        self.ProfileIcon = QtWidgets.QLabel(self.centralwidget)
        self.ProfileIcon.setGeometry(QtCore.QRect(24, 478, 40, 33))
        self.ProfileIcon.setPixmap(QPixmap("./Images/Group 311.png"))
        # self.ProfileIcon.setStyleSheet("Image:url(:/newPrefix/Group 311.png)")
        self.ProfileIcon.setText("")
        self.ProfileIcon.setObjectName("ProfileIcon")
        self.NotiLabel = QtWidgets.QLabel(self.centralwidget)
        self.NotiLabel.setGeometry(QtCore.QRect(764, 27, 16, 20))
        self.NotiLabel.setPixmap(QPixmap("./Images/Icon ionic-ios-notifications-outline.png"))
        # self.NotiLabel.setStyleSheet("Image: url(:/newPrefix/Icon ionic-ios-notifications-outline.png)")
        self.NotiLabel.setText("")
        self.NotiLabel.setObjectName("NotiLabel")
        self.MsgIcon = QtWidgets.QLabel(self.centralwidget)
        self.MsgIcon.setGeometry(QtCore.QRect(800, 30, 47, 15))
        self.MsgIcon.setPixmap(QPixmap("./Images/Icon feather-message-square.png"))
        # self.MsgIcon.setStyleSheet("Image:url(:/newPrefix/Icon feather-message-square.png)")
        self.MsgIcon.setText("")
        self.MsgIcon.setObjectName("MsgIcon")
        self.UserNameLabel = QtWidgets.QLabel(self.centralwidget)
        self.UserNameLabel.setGeometry(QtCore.QRect(863, 30, 72, 14))
        self.UserNameLabel.setStyleSheet("#UserNameLabel{\n"
"font: 11px \"Montserrat\";\n"
"color: #FFFFFF;\n"
"opacity: 1;\n"
"\n"
"\n"
"\n"
"}")
        self.UserNameLabel.setObjectName("UserNameLabel")
        self.ProfilepushButton = QtWidgets.QPushButton(self.centralwidget)
        self.ProfilepushButton.setGeometry(QtCore.QRect(947, 15, 44, 44))
        self.ProfilepushButton.setStyleSheet("#ProfilepushButton{\n"
"image: url(:/newPrefix/Path 206.png);\n"
"border: 1px solid #00A65A;\n"
"border-radius: 22px;\n"
"background-color: Transparent;\n"
"\n"
"}")
        self.ProfilepushButton.setText("")
        self.ProfilepushButton.setObjectName("ProfilepushButton")
        self.ProfilepushButton.setIconSize(QSize(35, 35))
        self.ProfilepushButton.setIcon(QIcon("./Images/Path 206.png"))
        self.Cameralabel = QtWidgets.QLabel(self.centralwidget)
        self.Cameralabel.setGeometry(QtCore.QRect(159, 215, 49, 13))
        self.Cameralabel.setStyleSheet("#Cameralabel{\n"
"font: 11px \"Montserrat\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"\n"
"\n"
"}")
        self.Cameralabel.setObjectName("Cameralabel")
        self.texLabel = QtWidgets.QLabel(self.centralwidget)
        self.texLabel.setGeometry(QtCore.QRect(700, 215, 31, 13))
        self.texLabel.setStyleSheet("#texLabel{\n"
"font: 11px \"Montserrat\";\n"
"color: rgb(255, 255, 255);\n"
"}")
        self.texLabel.setObjectName("texLabel")
        self.AudioLabel = QtWidgets.QLabel(self.centralwidget)
        self.AudioLabel.setGeometry(QtCore.QRect(700, 470, 41, 13))
        self.AudioLabel.setStyleSheet("#AudioLabel{\n"
"font: 11px \"Montserrat\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"\n"
"\n"
"}")
        self.AudioLabel.setObjectName("AudioLabel")
        self.CameraIcon = QtWidgets.QLabel(self.centralwidget)
        self.CameraIcon.setGeometry(QtCore.QRect(215, 215, 15, 15))
        self.CameraIcon.setPixmap(QPixmap("./Images/Icon awesome-camera.png"))
        # self.CameraIcon.setStyleSheet("Image: url(:/newPrefix/Icon awesome-camera.png)")
        self.CameraIcon.setText("")
        self.CameraIcon.setObjectName("CameraIcon")
        self.TextLabel = QtWidgets.QLabel(self.centralwidget)
        self.TextLabel.setGeometry(QtCore.QRect(732, 215, 15, 15))
        self.TextLabel.setPixmap(QPixmap("./Images/Icon open-text.png"))
        # self.TextLabel.setStyleSheet("image: url(:/newPrefix/Icon open-text.png);")
        self.TextLabel.setText("")
        self.TextLabel.setObjectName("TextLabel")
        self.AudioIcon = QtWidgets.QLabel(self.centralwidget)
        self.AudioIcon.setGeometry(QtCore.QRect(744, 470, 15, 15))
        self.AudioIcon.setPixmap(QPixmap("./Images/Icon material-audiotrack.png"))
        # self.AudioIcon.setStyleSheet("image: url(:/newPrefix/Icon material-audiotrack.png);")
        self.AudioIcon.setText("")
        self.AudioIcon.setObjectName("AudioIcon")
        self.AudiopushButton = QtWidgets.QPushButton(self.centralwidget)
        self.AudiopushButton.setGeometry(QtCore.QRect(780, 504, 105, 105))
        self.AudiopushButton.setStyleSheet("#AudiopushButton{\n"
"image: url(:/newPrefix/Icon open-audio-spectrum.png);\n"
"background-color: transparent;\n"
"\n"
"\n"
"}")
        self.AudiopushButton.setText("")
        self.AudiopushButton.setObjectName("AudiopushButton")
        self.AudiopushButton.setIconSize(QSize(100, 100))
        self.AudiopushButton.setIcon(QIcon("./Images/Icon open-audio-spectrum.png"))
        self.DayandDateLabel = QtWidgets.QLabel(self.centralwidget)
        self.DayandDateLabel.setGeometry(QtCore.QRect(159, 37, 123, 19))
        self.DayandDateLabel.setStyleSheet("#DayandDateLabel{\n"
"font: 16px \"Montserrat\";\n"
"text-align: left;\n"
"letter-spacing: 0px;\n"
"color: #FFFFFF;\n"
"opacity: 1;\n"
"\n"
"\n"
"\n"
"}")


        self.DayandDateLabel.setObjectName("DayandDateLabel")
        today = date.today()
        d2 = today.strftime("%B %d, %Y")
        # print("d2 =", d2)
        self.DayandDateLabel.setText(d2)


        self.TimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.TimeLabel.setGeometry(QtCore.QRect(159, 52, 115, 52))
        self.TimeLabel.setStyleSheet("#TimeLabel{\n"
"text-align: left;\n"
# "letter-spacing: NaNpx;\n"
"color: #FFFFFF;\n"
"opacity: 1;\n"
"font: 28px \"Montserrat\";\n"
"\n"
"\n"
"}")
        self.TimeLabel.setObjectName("TimeLabel")
        now = datetime.now()
        t = now.strftime("%H:%M")
        self.TimeLabel.setText(t)
        print(t)


        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(700, 240, 281, 171))
        self.textEdit.setStyleSheet("#textEdit{\n"
"background-color:transparent;\n"
"color: rgb(255, 255, 255);\n"
"font: 11px \"Montserrat\";\n"
"\n"
"\n"
"\n"
"}")
        self.textEdit.setObjectName("textEdit")
        self.PsltoUrdulabel = QtWidgets.QLabel(self.centralwidget)
        self.PsltoUrdulabel.setGeometry(QtCore.QRect(159, 155, 154, 27))
        self.PsltoUrdulabel.setStyleSheet("#PsltoUrdulabel{\n"
"text-align: left;\n"
"font: 22px \"Montserrat\";\n"
"letter-spacing: 0px;\n"
"color: #FFFFFF;\n"
"opacity: 1;\n"
"\n"
"\n"
"\n"
"\n"
"}")
        self.PsltoUrdulabel.setObjectName("PsltoUrdulabel")
        self.SideBar = QtWidgets.QPushButton(self.centralwidget)
        self.SideBar.setGeometry(QtCore.QRect(-10, -15, 96, 795))
        self.SideBar.setStyleSheet("#SideBar{\n"
"\n"
"border-radius: 2px;\n"
"background-color: rgb(0, 166, 90);\n"
"\n"
"\n"
"}")
        self.SideBar.setText("")
        self.SideBar.setObjectName("SideBar")
        self.SideBar.clicked.connect(self.Menu)
        self.SideBar.clicked.connect(MainWindow.close)

        self.LogoLabel = QtWidgets.QLabel(self.centralwidget)
        self.LogoLabel.setGeometry(QtCore.QRect(14, 41, 62, 48))
        self.LogoLabel.setStyleSheet("image: url(:/newPrefix/PSL TO URDU logo-02.png);")
        self.LogoLabel.setText("")
        self.LogoLabel.setObjectName("LogoLabel")
        self.staticMotionBtn = QtWidgets.QPushButton(self.centralwidget)
        self.staticMotionBtn.setGeometry(QtCore.QRect(160, 280, 114, 26))
        self.staticMotionBtn.clicked.connect(self.static_Sign_Language)
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.staticMotionBtn.setFont(font)
        self.staticMotionBtn.setStyleSheet("#staticMotionBtn{\n"
"border-radius: 5px;\n"
"opacity: 1;\n"
"font: 15px \"Montserrat\";\n"
"color: rgb(16, 106, 56);\n"
"background-color: rgb(40, 232, 144);\n"
"\n"
"\n"
"}")
        self.staticMotionBtn.setObjectName("staticMotionBtn")
        self.dynamiMotionBtn = QtWidgets.QPushButton(self.centralwidget)
        self.dynamiMotionBtn.setGeometry(QtCore.QRect(290, 280, 150, 26))
        self.dynamiMotionBtn.setStyleSheet("#dynamiMotionBtn{\n"
"border-radius: 5px;\n"
"opacity: 1;\n"
"font: 15px \"Montserrat\";\n"
"color: rgb(16, 106, 56);\n"
"background-color: rgb(40, 232, 144);\n"
"\n"
"\n"
"}")
        self.dynamiMotionBtn.setObjectName("dynamiMotionBtn")
        self.dynamiMotionBtn.clicked.connect(self.dynamic_Sign_Language)
        self.ProfileScreen.raise_()
        self.NotiLabel.raise_()
        self.MsgIcon.raise_()
        self.UserNameLabel.raise_()
        self.ProfilepushButton.raise_()
        self.Cameralabel.raise_()
        self.texLabel.raise_()
        self.AudioLabel.raise_()
        self.CameraIcon.raise_()
        self.TextLabel.raise_()
        self.AudioIcon.raise_()
        self.AudiopushButton.raise_()
        self.DayandDateLabel.raise_()
        self.TimeLabel.raise_()
        self.textEdit.raise_()
        self.SideBar.raise_()
        self.DashboardIcon.raise_()
        self.ProfileIcon.raise_()
        self.PslToUrduIcon.raise_()
        self.PsltoUrdulabel.raise_()
        self.AudioToUrduIcon.raise_()
        self.LogoLabel.raise_()
        self.staticMotionBtn.raise_()
        self.dynamiMotionBtn.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1024, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.UserNameLabel.setText(_translate("MainWindow", "USERNAME"))
        self.Cameralabel.setText(_translate("MainWindow", "CAMERA"))
        self.texLabel.setText(_translate("MainWindow", "TEXT"))
        self.AudioLabel.setText(_translate("MainWindow", "AUDIO"))
        # self.DayandDateLabel.setText(_translate("MainWindow", "Thursday, 25.10"))
        # self.TimeLabel.setText(_translate("MainWindow", "5:48 PM"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Montserrat\'; font-size:11px; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt;\">Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam</span></p></body></html>"))
        self.PsltoUrdulabel.setText(_translate("MainWindow", "PSL TO URDU"))
        self.staticMotionBtn.setText(_translate("MainWindow", "Static Motion"))
        self.dynamiMotionBtn.setText(_translate("MainWindow", "Dynamic Motion"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow_PSLtoUrdu()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
